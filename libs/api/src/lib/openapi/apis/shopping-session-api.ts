/* tslint:disable */
/* eslint-disable */
/**
 * Demo Shop API
 * A comprehensive API for managing an online store, providing endpoints for product catalog, user management, shopping cart operations, and order processing
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AddCartItemRequest,
  CartItemResponse,
  OrderResponse,
  ShoppingSessionResponse,
  UpdateCartItemQuantityRequest,
} from '../models';
import {
  AddCartItemRequestFromJSON,
  AddCartItemRequestToJSON,
  CartItemResponseFromJSON,
  CartItemResponseToJSON,
  OrderResponseFromJSON,
  OrderResponseToJSON,
  ShoppingSessionResponseFromJSON,
  ShoppingSessionResponseToJSON,
  UpdateCartItemQuantityRequestFromJSON,
  UpdateCartItemQuantityRequestToJSON,
} from '../models';

export interface AddCartItemOperationRequest {
  addCartItemRequest: AddCartItemRequest;
}

export interface RemoveCartItemRequest {
  id: number;
}

export interface UpdateCartItemQuantityOperationRequest {
  id: number;
  updateCartItemQuantityRequest: UpdateCartItemQuantityRequest;
}

/**
 *
 */
export class ShoppingSessionApi extends runtime.BaseAPI {
  /**
   * Add a cart item to the shopping session of current user based on identity extracted from bearer token
   * Add cart item
   */
  async addCartItemRaw(
    requestParameters: AddCartItemOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CartItemResponse>> {
    if (requestParameters['addCartItemRequest'] == null) {
      throw new runtime.RequiredError(
        'addCartItemRequest',
        'Required parameter "addCartItemRequest" was null or undefined when calling addCartItem().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/shopping-sessions/current/cart-items`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AddCartItemRequestToJSON(requestParameters['addCartItemRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => CartItemResponseFromJSON(jsonValue));
  }

  /**
   * Add a cart item to the shopping session of current user based on identity extracted from bearer token
   * Add cart item
   */
  async addCartItem(
    requestParameters: AddCartItemOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CartItemResponse> {
    const response = await this.addCartItemRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Check out by creating an order from the current shopping session and deleting the shopping session afterwards
   * Checkout current shopping session
   */
  async checkoutRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<OrderResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/shopping-sessions/checkout`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => OrderResponseFromJSON(jsonValue));
  }

  /**
   * Check out by creating an order from the current shopping session and deleting the shopping session afterwards
   * Checkout current shopping session
   */
  async checkout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
    const response = await this.checkoutRaw(initOverrides);
    return await response.value();
  }

  /**
   * Remove a cart item from the shopping session of current user based on identity extracted from bearer token
   * Remove cart item
   */
  async removeCartItemRaw(
    requestParameters: RemoveCartItemRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling removeCartItem().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/shopping-sessions/current/cart-items/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Remove a cart item from the shopping session of current user based on identity extracted from bearer token
   * Remove cart item
   */
  async removeCartItem(
    requestParameters: RemoveCartItemRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.removeCartItemRaw(requestParameters, initOverrides);
  }

  /**
   * Resolve current shopping session based on identity extracted from bearer token
   * Resolve current shopping session
   */
  async resolveCurrentShoppingSessionRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShoppingSessionResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/shopping-sessions/current`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ShoppingSessionResponseFromJSON(jsonValue));
  }

  /**
   * Resolve current shopping session based on identity extracted from bearer token
   * Resolve current shopping session
   */
  async resolveCurrentShoppingSession(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShoppingSessionResponse> {
    const response = await this.resolveCurrentShoppingSessionRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update quantity of a cart item in shopping session of current user based on identity extracted from bearer token
   * Update cart item quantity
   */
  async updateCartItemQuantityRaw(
    requestParameters: UpdateCartItemQuantityOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CartItemResponse>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling updateCartItemQuantity().'
      );
    }

    if (requestParameters['updateCartItemQuantityRequest'] == null) {
      throw new runtime.RequiredError(
        'updateCartItemQuantityRequest',
        'Required parameter "updateCartItemQuantityRequest" was null or undefined when calling updateCartItemQuantity().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/shopping-sessions/current/cart-items/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateCartItemQuantityRequestToJSON(requestParameters['updateCartItemQuantityRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => CartItemResponseFromJSON(jsonValue));
  }

  /**
   * Update quantity of a cart item in shopping session of current user based on identity extracted from bearer token
   * Update cart item quantity
   */
  async updateCartItemQuantity(
    requestParameters: UpdateCartItemQuantityOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CartItemResponse> {
    const response = await this.updateCartItemQuantityRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
