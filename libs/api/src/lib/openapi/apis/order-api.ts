/* tslint:disable */
/* eslint-disable */
/**
 * Demo Shop API
 * A comprehensive API for managing an online store, providing endpoints for product catalog, user management, shopping cart operations, and order processing
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type { OrderListResponse, OrderResponse } from '../models/index';
import { OrderListResponseFromJSON, OrderResponseFromJSON } from '../models/index';

export interface GetOrderByIdRequest {
  id: number;
}

/**
 *
 */
export class OrderApi extends runtime.BaseAPI {

  /**
   * Get all orders of current user based on identity extracted from bearer token
   * Get all orders
   */
  async getAllOrdersOfCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderListResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/api/v1/orders`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides);

    return new runtime.JSONApiResponse(response, (jsonValue) => OrderListResponseFromJSON(jsonValue));
  }

  /**
   * Get all orders of current user based on identity extracted from bearer token
   * Get all orders
   */
  async getAllOrdersOfCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderListResponse> {
    const response = await this.getAllOrdersOfCurrentUserRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get order by id of current user based on identity extracted from bearer token
   * Get order by id
   */
  async getOrderByIdRaw(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling getOrderById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/api/v1/orders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides);

    return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
  }

  /**
   * Get order by id of current user based on identity extracted from bearer token
   * Get order by id
   */
  async getOrderById(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
    const response = await this.getOrderByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

}
